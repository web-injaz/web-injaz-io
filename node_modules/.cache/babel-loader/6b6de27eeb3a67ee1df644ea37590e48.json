{"ast":null,"code":"import _classCallCheck from \"C:\\\\xampp\\\\htdocs\\\\webinjaz-io\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\xampp\\\\htdocs\\\\webinjaz-io\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\xampp\\\\htdocs\\\\webinjaz-io\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\xampp\\\\htdocs\\\\webinjaz-io\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\xampp\\\\htdocs\\\\webinjaz-io\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\xampp\\\\htdocs\\\\webinjaz-io\\\\src\\\\containers\\\\Admin.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { getShapesList as _getShapesList } from '../actions/shapesAction';\n\nvar Admin =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Admin, _Component);\n\n  function Admin() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Admin);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Admin)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _this.componentWillMount = function () {\n      _this.props.getShapesList([]);\n    };\n\n    return _this;\n  }\n\n  _createClass(Admin, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        className: \"admin bg-dark\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 14\n        },\n        __self: this\n      }, React.createElement(\"table\", {\n        className: \"table\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 15\n        },\n        __self: this\n      }, React.createElement(\"thead\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 16\n        },\n        __self: this\n      }, React.createElement(\"tr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 17\n        },\n        __self: this\n      }, React.createElement(\"th\", {\n        scope: \"col\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 18\n        },\n        __self: this\n      }, \"#\"), React.createElement(\"th\", {\n        scope: \"col\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 19\n        },\n        __self: this\n      }, \"name\"), React.createElement(\"th\", {\n        scope: \"col\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 20\n        },\n        __self: this\n      }, \"component\"), React.createElement(\"th\", {\n        scope: \"col\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 21\n        },\n        __self: this\n      }, \"codepen\"), React.createElement(\"th\", {\n        scope: \"col\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 22\n        },\n        __self: this\n      }, \"status\"))), React.createElement(\"tbody\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 25\n        },\n        __self: this\n      }, this.props.shapesList && this.props.shapesList.map(function (component, index) {\n        return component.shapes && component.shapes.map(function (shape) {\n          return React.createElement(\"tr\", {\n            key: shape.name,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 31\n            },\n            __self: this\n          }, React.createElement(\"th\", {\n            scope: \"row\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 32\n            },\n            __self: this\n          }, index), React.createElement(\"td\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 33\n            },\n            __self: this\n          }, shape.name), React.createElement(\"td\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 34\n            },\n            __self: this\n          }, component.name), React.createElement(\"td\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 35\n            },\n            __self: this\n          }, shape.codepen ? shape.codepen : 'Private'), React.createElement(\"td\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 36\n            },\n            __self: this\n          }, shape.status || shape.status !== null ? 'Active' : 'Inactive'));\n        });\n      }))));\n    }\n  }]);\n\n  return Admin;\n}(Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    shapesList: state.shapes.shapesList\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    getShapesList: function getShapesList(shapes) {\n      return dispatch(_getShapesList(shapes));\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Admin);","map":{"version":3,"sources":["C:\\xampp\\htdocs\\webinjaz-io\\src\\containers\\Admin.js"],"names":["React","Component","connect","getShapesList","Admin","componentWillMount","props","shapesList","map","component","index","shapes","shape","name","codepen","status","mapStateToProps","state","mapDispatchToProps","dispatch"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,aAAa,IAAbA,cAAT,QAA6B,yBAA7B;;IAEMC,K;;;;;;;;;;;;;;;;;;UAGFC,kB,GAAqB,YAAM;AACvB,YAAKC,KAAL,CAAWH,aAAX,CAAyB,EAAzB;AACH,K;;;;;;;6BAEQ;AACL,aACI;AAAK,QAAA,SAAS,EAAC,eAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAO,QAAA,SAAS,EAAC,OAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAI,QAAA,KAAK,EAAC,KAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aADJ,EAEI;AAAI,QAAA,KAAK,EAAC,KAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFJ,EAGI;AAAI,QAAA,KAAK,EAAC,KAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAHJ,EAII;AAAI,QAAA,KAAK,EAAC,KAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAJJ,EAKI;AAAI,QAAA,KAAK,EAAC,KAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBALJ,CADJ,CADJ,EAUI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACK,KAAKG,KAAL,CAAWC,UAAX,IACG,KAAKD,KAAL,CAAWC,UAAX,CAAsBC,GAAtB,CAA0B,UAACC,SAAD,EAAYC,KAAZ,EAAsB;AAC5C,eAAOD,SAAS,CAACE,MAAV,IACHF,SAAS,CAACE,MAAV,CAAiBH,GAAjB,CAAqB,UAACI,KAAD,EAAW;AAC5B,iBACI;AAAI,YAAA,GAAG,EAAEA,KAAK,CAACC,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aACI;AAAI,YAAA,KAAK,EAAC,KAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAiBH,KAAjB,CADJ,EAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAKE,KAAK,CAACC,IAAX,CAFJ,EAGI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAKJ,SAAS,CAACI,IAAf,CAHJ,EAII;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAKD,KAAK,CAACE,OAAN,GAAgBF,KAAK,CAACE,OAAtB,GAAgC,SAArC,CAJJ,EAKI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAKF,KAAK,CAACG,MAAN,IAAgBH,KAAK,CAACG,MAAN,KAAiB,IAAjC,GAAwC,QAAxC,GAAmD,UAAxD,CALJ,CADJ;AASH,SAVD,CADJ;AAaH,OAdD,CAFR,CAVJ,CADJ,CADJ;AAkCH;;;;EA1Ced,S;;AA6CpB,IAAMe,eAAe,GAAG,SAAlBA,eAAkB,CAAAC,KAAK;AAAA,SAAK;AAC9BV,IAAAA,UAAU,EAAEU,KAAK,CAACN,MAAN,CAAaJ;AADK,GAAL;AAAA,CAA7B;;AAIA,IAAMW,kBAAkB,GAAG,SAArBA,kBAAqB,CAAAC,QAAQ;AAAA,SAAK;AACpChB,IAAAA,aAAa,EAAE,uBAAAQ,MAAM;AAAA,aAAIQ,QAAQ,CAAChB,cAAa,CAACQ,MAAD,CAAd,CAAZ;AAAA;AADe,GAAL;AAAA,CAAnC;;AAIA,eAAeT,OAAO,CAACc,eAAD,EAAkBE,kBAAlB,CAAP,CAA6Cd,KAA7C,CAAf","sourcesContent":["import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { getShapesList} from '../actions/shapesAction';\r\n\r\nclass Admin extends Component\r\n{\r\n\r\n    componentWillMount = () => {\r\n        this.props.getShapesList([]);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"admin bg-dark\">\r\n                <table className=\"table\">\r\n                    <thead>\r\n                        <tr>\r\n                            <th scope=\"col\">#</th>\r\n                            <th scope=\"col\">name</th>\r\n                            <th scope=\"col\">component</th>\r\n                            <th scope=\"col\">codepen</th>\r\n                            <th scope=\"col\">status</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {this.props.shapesList && (\r\n                            this.props.shapesList.map((component, index) => {\r\n                                return component.shapes && (\r\n                                    component.shapes.map((shape) => {\r\n                                        return (\r\n                                            <tr key={shape.name}>\r\n                                                <th scope=\"row\">{index}</th>\r\n                                                <td>{shape.name}</td>\r\n                                                <td>{component.name}</td>\r\n                                                <td>{shape.codepen ? shape.codepen : 'Private'}</td>\r\n                                                <td>{shape.status || shape.status !== null ? 'Active' : 'Inactive'}</td>\r\n                                            </tr>\r\n                                        )\r\n                                    })\r\n                                )\r\n                            })\r\n                        )}\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    shapesList: state.shapes.shapesList\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    getShapesList: shapes => dispatch(getShapesList(shapes))\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Admin);"]},"metadata":{},"sourceType":"module"}