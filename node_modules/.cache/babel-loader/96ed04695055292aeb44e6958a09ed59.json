{"ast":null,"code":"import _classCallCheck from \"C:\\\\xampp\\\\htdocs\\\\webinjaz-io\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\xampp\\\\htdocs\\\\webinjaz-io\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\xampp\\\\htdocs\\\\webinjaz-io\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\xampp\\\\htdocs\\\\webinjaz-io\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\xampp\\\\htdocs\\\\webinjaz-io\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\xampp\\\\htdocs\\\\webinjaz-io\\\\src\\\\containers\\\\ShaperForm.js\";\nimport React, { Component } from 'react';\nimport { Field, reduxForm } from 'redux-form';\nimport validate from '../utilities/validate';\nimport { connect } from 'react-redux';\nimport { getShapesList as _getShapesList } from '../actions/shapesAction'; // const renderTextarea = ({input, label, meta: { touched, error }}) => {\n//     return (\n//         <div className=\"form-group\">\n//             <label htmlFor={input.name}>{label}</label>\n//             <textarea {...input} className=\"form-control\" placeholder={label} />\n//             { touched && error && <span className=\"help-block\">{error}</span>}\n//         </div>\n//     )\n// }\n// const renderCheck = ({input, label, type, meta: { touched, error }}) => {    \n//     return (\n//         <div className={`custom-control custom-${type}`}>\n//             <input className=\"custom-control-input\" {...input} type={type} placeholder={label} />\n//             <label className=\"custom-control-label\" htmlFor={input.name}>{label}</label>\n//             { touched && error && <span className=\"help-block\">{error}</span>}\n//         </div>\n//     )\n// }\n\nvar ShaperForm =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(ShaperForm, _Component);\n\n  function ShaperForm() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, ShaperForm);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(ShaperForm)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _this.renderInput = function (_ref) {\n      var input = _ref.input,\n          label = _ref.label,\n          type = _ref.type,\n          _ref$meta = _ref.meta,\n          touched = _ref$meta.touched,\n          error = _ref$meta.error;\n      return React.createElement(\"div\", {\n        className: \"form-group\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 38\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        htmlFor: input.name,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 39\n        },\n        __self: this\n      }, label), React.createElement(\"input\", Object.assign({}, input, {\n        className: \"form-control\",\n        type: type,\n        placeholder: label,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 40\n        },\n        __self: this\n      })), touched && error && React.createElement(\"span\", {\n        className: \"help-block\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 41\n        },\n        __self: this\n      }, error));\n    };\n\n    _this.renderSelect = function (_ref2) {\n      var input = _ref2.input,\n          label = _ref2.label,\n          type = _ref2.type,\n          _ref2$meta = _ref2.meta,\n          touched = _ref2$meta.touched,\n          error = _ref2$meta.error;\n      return React.createElement(\"div\", {\n        className: \"form-group\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        htmlFor: input.name,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49\n        },\n        __self: this\n      }, label), React.createElement(\"select\", Object.assign({}, input, {\n        className: \"form-control\",\n        placeholder: label,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50\n        },\n        __self: this\n      }), _this.props.shapesList && _this.props.shapesList.map(function (option) {\n        return React.createElement(\"option\", {\n          key: option.name,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 51\n          },\n          __self: this\n        }, option.name);\n      })), touched && error && React.createElement(\"span\", {\n        className: \"help-block\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53\n        },\n        __self: this\n      }, error));\n    };\n\n    return _this;\n  }\n\n  _createClass(ShaperForm, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.props.getShapesList([]);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          handleSubmit = _this$props.handleSubmit,\n          pristine = _this$props.pristine,\n          reset = _this$props.reset,\n          submitting = _this$props.submitting;\n      return React.createElement(\"div\", {\n        className: \"shaper-form\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62\n        },\n        __self: this\n      }, React.createElement(\"form\", {\n        onSubmit: handleSubmit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"form-section\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64\n        },\n        __self: this\n      }, React.createElement(\"h4\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65\n        },\n        __self: this\n      }, \"Build a shape\"), React.createElement(\"div\", {\n        className: \"mini-section\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66\n        },\n        __self: this\n      }, React.createElement(Field, {\n        name: \"shape_name\",\n        type: \"text\",\n        component: this.renderInput,\n        label: \"Shape name\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67\n        },\n        __self: this\n      }), React.createElement(Field, {\n        name: \"component_name\",\n        type: \"text\",\n        component: this.renderSelect,\n        label: \"Component name\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73\n        },\n        __self: this\n      }))), React.createElement(\"div\", {\n        className: \"form-section\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81\n        },\n        __self: this\n      }, React.createElement(\"h4\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82\n        },\n        __self: this\n      }, \"Add your style\"), React.createElement(\"div\", {\n        className: \"mini-section url\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83\n        },\n        __self: this\n      }, \"https://codepen.io/\", React.createElement(Field, {\n        name: \"codepen_username\",\n        component: this.renderInput,\n        label: \"username\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85\n        },\n        __self: this\n      }), \"/pen/\", React.createElement(Field, {\n        name: \"codepen_id\",\n        component: this.renderInput,\n        label: \"id\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91\n        },\n        __self: this\n      }))), React.createElement(\"div\", {\n        className: \"form-section\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        type: \"submit\",\n        className: \"btn btn-primary\",\n        disabled: pristine || submitting,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99\n        },\n        __self: this\n      }, \"Submit\"), React.createElement(\"button\", {\n        type: \"button\",\n        className: \"btn btn-secondary\",\n        disabled: pristine || submitting,\n        onClick: reset,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102\n        },\n        __self: this\n      }, \"Clear Values\"))));\n    }\n  }]);\n\n  return ShaperForm;\n}(Component);\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    getShapesList: function getShapesList(shapes) {\n      return dispatch(_getShapesList(shapes));\n    }\n  };\n};\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    form: state.form.shaperForm,\n    shapesList: state.shapes.shapesList\n  };\n};\n\nexport default reduxForm({\n  form: 'shaperForm',\n  validate: validate\n})(connect(mapStateToProps, mapDispatchToProps)(ShaperForm));","map":{"version":3,"sources":["C:\\xampp\\htdocs\\webinjaz-io\\src\\containers\\ShaperForm.js"],"names":["React","Component","Field","reduxForm","validate","connect","getShapesList","ShaperForm","renderInput","input","label","type","meta","touched","error","name","renderSelect","props","shapesList","map","option","handleSubmit","pristine","reset","submitting","mapDispatchToProps","dispatch","shapes","mapStateToProps","state","form","shaperForm"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\n\r\nimport { Field, reduxForm } from 'redux-form';\r\nimport validate from '../utilities/validate';\r\nimport { connect } from 'react-redux';\r\nimport { getShapesList } from '../actions/shapesAction';\r\n\r\n\r\n// const renderTextarea = ({input, label, meta: { touched, error }}) => {\r\n//     return (\r\n//         <div className=\"form-group\">\r\n//             <label htmlFor={input.name}>{label}</label>\r\n//             <textarea {...input} className=\"form-control\" placeholder={label} />\r\n//             { touched && error && <span className=\"help-block\">{error}</span>}\r\n//         </div>\r\n//     )\r\n// }\r\n\r\n// const renderCheck = ({input, label, type, meta: { touched, error }}) => {    \r\n//     return (\r\n//         <div className={`custom-control custom-${type}`}>\r\n//             <input className=\"custom-control-input\" {...input} type={type} placeholder={label} />\r\n//             <label className=\"custom-control-label\" htmlFor={input.name}>{label}</label>\r\n//             { touched && error && <span className=\"help-block\">{error}</span>}\r\n//         </div>\r\n//     )\r\n// }\r\n\r\nclass ShaperForm extends Component\r\n{\r\n\r\n    componentDidMount() {\r\n        this.props.getShapesList([]);\r\n    }\r\n\r\n    renderInput = ({input, label, type, meta: { touched, error }}) => {\r\n        return (\r\n            <div className=\"form-group\">\r\n                <label htmlFor={input.name}>{label}</label>\r\n                <input {...input} className=\"form-control\" type={type} placeholder={label} />\r\n                { touched && error && <span className=\"help-block\">{error}</span>}\r\n            </div>\r\n        )\r\n    }\r\n\r\n    renderSelect = ({input, label, type, meta: { touched, error }}) => {\r\n        return (\r\n            <div className=\"form-group\">\r\n                <label htmlFor={input.name}>{label}</label>\r\n                <select {...input} className=\"form-control\" placeholder={label} >\r\n                    {this.props.shapesList && this.props.shapesList.map(option => <option key={option.name}>{option.name}</option>)}\r\n                </select>\r\n                { touched && error && <span className=\"help-block\">{error}</span>}\r\n            </div>\r\n        )\r\n    }\r\n\r\n    render() {\r\n        const { handleSubmit, pristine, reset, submitting } = this.props;\r\n\r\n        return (\r\n            <div className=\"shaper-form\">\r\n                <form onSubmit={handleSubmit}>\r\n                    <div className=\"form-section\">\r\n                        <h4>Build a shape</h4>\r\n                        <div className=\"mini-section\">\r\n                            <Field\r\n                                name=\"shape_name\"\r\n                                type=\"text\"\r\n                                component={this.renderInput}\r\n                                label=\"Shape name\"\r\n                            />\r\n                            <Field\r\n                                name=\"component_name\"\r\n                                type=\"text\"\r\n                                component={this.renderSelect}\r\n                                label=\"Component name\"\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"form-section\">\r\n                        <h4>Add your style</h4>\r\n                        <div className=\"mini-section url\">\r\n                            https://codepen.io/\r\n                            <Field\r\n                                name=\"codepen_username\"\r\n                                component={this.renderInput}\r\n                                label=\"username\"\r\n                            />\r\n                            /pen/\r\n                            <Field\r\n                                name=\"codepen_id\"\r\n                                component={this.renderInput}\r\n                                label=\"id\"\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"form-section\">\r\n                        <button type=\"submit\" className=\"btn btn-primary\" disabled={pristine || submitting}>\r\n                        Submit\r\n                        </button>\r\n                        <button type=\"button\" className=\"btn btn-secondary\" disabled={pristine || submitting} onClick={reset}>\r\n                        Clear Values\r\n                        </button>\r\n                    </div>\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    getShapesList: (shapes) => dispatch(getShapesList(shapes))\r\n})\r\n\r\nconst mapStateToProps = state => {    \r\n    return {\r\n        form: state.form.shaperForm,\r\n        shapesList: state.shapes.shapesList\r\n    }\r\n}\r\n\r\nexport default reduxForm({\r\n    form: 'shaperForm',\r\n    validate\r\n})(connect(mapStateToProps, mapDispatchToProps)(ShaperForm));"]},"metadata":{},"sourceType":"module"}