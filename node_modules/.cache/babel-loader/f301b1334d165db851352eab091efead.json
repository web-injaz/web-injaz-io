{"ast":null,"code":"\"use strict\";\n\nexports.__esModule = true;\nexports.default = void 0;\n\nvar _mapValues2 = _interopRequireDefault(require(\"lodash/mapValues\"));\n\nvar _isEqual2 = _interopRequireDefault(require(\"lodash/isEqual\"));\n\nvar _isEmpty2 = _interopRequireDefault(require(\"lodash/isEmpty\"));\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _reactRedux = require(\"react-redux\");\n\nvar _prefixName = _interopRequireDefault(require(\"./util/prefixName\"));\n\nvar _ReduxFormContext = require(\"./ReduxFormContext\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  subClass.__proto__ = superClass;\n}\n\nvar createValues = function createValues(_ref) {\n  var getIn = _ref.getIn;\n  return function (firstArg) {\n    for (var _len = arguments.length, rest = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      rest[_key - 1] = arguments[_key];\n    } // create a class that reads current form name and creates a selector\n    // return\n\n\n    return function (Component) {\n      var FormValues =\n      /*#__PURE__*/\n      function (_React$Component) {\n        _inheritsLoose(FormValues, _React$Component);\n\n        function FormValues(props) {\n          var _this;\n\n          _this = _React$Component.call(this, props) || this;\n\n          if (!props._reduxForm) {\n            throw new Error('formValues() must be used inside a React tree decorated with reduxForm()');\n          }\n\n          _this.updateComponent(props);\n\n          return _this;\n        }\n\n        var _proto = FormValues.prototype;\n\n        _proto.componentWillReceiveProps = function componentWillReceiveProps(props) {\n          if (typeof firstArg === 'function') {\n            this.updateComponent(props);\n          }\n        };\n\n        _proto.render = function render() {\n          var Component = this.Component;\n          return _react.default.createElement(Component // so that the connected component updates props when sectionPrefix has changed\n          , _extends({\n            sectionPrefix: this.props._reduxForm.sectionPrefix\n          }, this.props));\n        };\n\n        _proto.updateComponent = function updateComponent(props) {\n          var valuesMap;\n          var resolvedFirstArg = typeof firstArg === 'function' ? firstArg(props) : firstArg;\n\n          if (typeof resolvedFirstArg === 'string') {\n            var _rest$reduce;\n\n            valuesMap = rest.reduce(function (result, k) {\n              result[k] = k;\n              return result;\n            }, (_rest$reduce = {}, _rest$reduce[resolvedFirstArg] = resolvedFirstArg, _rest$reduce));\n          } else {\n            valuesMap = resolvedFirstArg;\n          }\n\n          if ((0, _isEmpty2.default)(valuesMap)) {\n            // maybe that empty valuesMap is ok if firstArg is a function?\n            // if this is the case, we probably should set this.Component = Component\n            throw new Error('formValues(): You must specify values to get as formValues(name1, name2, ...) or formValues({propName1: propPath1, ...}) or formValues((props) => name) or formValues((props) => ({propName1: propPath1, ...}))');\n          }\n\n          if ((0, _isEqual2.default)(valuesMap, this._valuesMap)) {\n            // no change in valuesMap\n            return;\n          }\n\n          this._valuesMap = valuesMap;\n          this.setComponent();\n        };\n\n        _proto.setComponent = function setComponent() {\n          var _this2 = this;\n\n          var formValuesSelector = function formValuesSelector(_, _ref2) {\n            var sectionPrefix = _ref2.sectionPrefix; // Yes, we're only using connect() for listening to updates.\n            // The second argument needs to be there so that connect calls\n            // the selector when props change\n\n            var getValues = _this2.props._reduxForm.getValues;\n            var values = getValues();\n            return (0, _mapValues2.default)(_this2._valuesMap, function (path) {\n              return getIn(values, (0, _prefixName.default)(_this2.props, path));\n            });\n          };\n\n          this.Component = (0, _reactRedux.connect)(formValuesSelector, function () {\n            return {};\n          } // ignore dispatch\n          )(function (_ref3) {\n            var sectionPrefix = _ref3.sectionPrefix,\n                otherProps = _objectWithoutPropertiesLoose(_ref3, [\"sectionPrefix\"]);\n\n            return _react.default.createElement(Component, otherProps);\n          });\n        };\n\n        return FormValues;\n      }(_react.default.Component);\n\n      return (0, _ReduxFormContext.withReduxForm)(FormValues);\n    };\n  };\n};\n\nvar _default = createValues;\nexports.default = _default;","map":null,"metadata":{},"sourceType":"script"}